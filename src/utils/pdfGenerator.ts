import jsPDF from 'jspdf';

export interface LetterData {
  content: string;
  ticketNumber: string;
  personalDetails: {
    name: string;
    email: string;
    address: string;
    phone: string;
  };
}

export class PDFGenerator {
  /**
   * Generate a PDF from letter content
   */
  static generateLetterPDF(letterData: LetterData): jsPDF {
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up fonts and styling
    doc.setFont('helvetica');
    
    // Add header
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('FORMAL APPEAL LETTER', 105, 20, { align: 'center' });
    
    // Add a line under header
    doc.setLineWidth(0.5);
    doc.line(20, 25, 190, 25);
    
    // Reset font for body
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    
    // Split content into lines and add to PDF
    const lines = this.splitTextToLines(letterData.content, 170); // 170mm width for text
    let yPosition = 35;
    const lineHeight = 5;
    const pageHeight = 280; // A4 height minus margins
    
    lines.forEach((line, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight) {
        doc.addPage();
        yPosition = 20;
      }
      
      // Handle different text styles
      if (line.trim().startsWith('Re:') || line.trim().endsWith(':')) {
        doc.setFont('helvetica', 'bold');
      } else if (line.trim() === '' || line.trim().match(/^[A-Z\s]+$/)) {
        doc.setFont('helvetica', 'bold');
      } else {
        doc.setFont('helvetica', 'normal');
      }
      
      doc.text(line, 20, yPosition);
      yPosition += lineHeight;
    });
    
    // Add footer with generation info
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text(
        `Generated by AutoAudit - Page ${i} of ${totalPages}`,
        105,
        290,
        { align: 'center' }
      );
      doc.text(
        `Generated on: ${new Date().toLocaleDateString('en-GB')}`,
        190,
        290,
        { align: 'right' }
      );
    }
    
    return doc;
  }

  /**
   * Download the PDF file
   */
  static downloadPDF(letterData: LetterData): void {
    const doc = this.generateLetterPDF(letterData);
    const filename = `Appeal_Letter_${letterData.ticketNumber}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(filename);
  }

  /**
   * Get PDF as blob for email attachment
   */
  static getPDFBlob(letterData: LetterData): Blob {
    const doc = this.generateLetterPDF(letterData);
    return doc.output('blob');
  }

  /**
   * Get PDF as base64 string
   */
  static getPDFBase64(letterData: LetterData): string {
    const doc = this.generateLetterPDF(letterData);
    return doc.output('datauristring');
  }

  /**
   * Split text into lines that fit within the specified width
   */
  private static splitTextToLines(text: string, maxWidth: number): string[] {
    const lines: string[] = [];
    const paragraphs = text.split('\n');
    
    paragraphs.forEach(paragraph => {
      if (paragraph.trim() === '') {
        lines.push('');
        return;
      }
      
      // For very long paragraphs, split them
      const words = paragraph.split(' ');
      let currentLine = '';
      
      words.forEach(word => {
        const testLine = currentLine ? `${currentLine} ${word}` : word;
        
        // Rough character limit per line (adjust based on font size)
        if (testLine.length > 85) {
          if (currentLine) {
            lines.push(currentLine);
            currentLine = word;
          } else {
            lines.push(word);
          }
        } else {
          currentLine = testLine;
        }
      });
      
      if (currentLine) {
        lines.push(currentLine);
      }
    });
    
    return lines;
  }

  /**
   * Create a professional letterhead template
   */
  static addLetterhead(doc: jsPDF, personalDetails: any): void {
    // Add sender details in top right
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    const senderLines = [
      personalDetails.name,
      ...personalDetails.address.split('\n'),
      personalDetails.email,
      personalDetails.phone
    ];
    
    let yPos = 20;
    senderLines.forEach(line => {
      if (line.trim()) {
        doc.text(line.trim(), 190, yPos, { align: 'right' });
        yPos += 4;
      }
    });
  }
}

export default PDFGenerator;