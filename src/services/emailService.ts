export interface EmailData {
  to: string;
  subject: string;
  message: string;
  letterContent: string;
  ticketNumber: string;
  personalDetails: {
    name: string;
    email: string;
    address: string;
    phone: string;
  };
}

export interface VehicleReportEmailData {
  to: string;
  registration: string;
  reportContent: string;
  reportType: 'basic' | 'comprehensive';
  senderName?: string;
}

export class EmailService {
  /**
   * Send email using Netlify Forms
   */
  static async sendLetterEmail(emailData: EmailData): Promise<{ success: boolean; message: string }> {
    try {
      const formData = new FormData();
      
      // Add form fields for Netlify Forms
      formData.append('form-name', 'dispute-letter-email');
      formData.append('name', emailData.personalDetails.name);
      formData.append('email', emailData.to);
      formData.append('subject', emailData.subject);
      formData.append('message', emailData.message);
      formData.append('ticket-number', emailData.ticketNumber);
      formData.append('letter-content', emailData.letterContent);
      formData.append('phone', emailData.personalDetails.phone);
      formData.append('address', emailData.personalDetails.address);
      
      const response = await fetch('/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(formData as any).toString()
      });

      if (response.ok) {
        return {
          success: true,
          message: 'Email sent successfully! Check your inbox for the dispute letter.'
        };
      } else {
        throw new Error('Failed to send email');
      }
    } catch (error) {
      console.error('Email sending error:', error);
      return {
        success: false,
        message: 'Failed to send email. Please try downloading the PDF instead.'
      };
    }
  }

  /**
   * Send vehicle report email using Netlify Forms
   */
  static async sendVehicleReportEmail(emailData: VehicleReportEmailData): Promise<{ success: boolean; message: string }> {
    try {
      const formData = new FormData();
      
      // Add form fields for Netlify Forms
      formData.append('form-name', 'vehicle-report-email');
      formData.append('email', emailData.to);
      formData.append('registration', emailData.registration);
      formData.append('report-content', emailData.reportContent);
      formData.append('report-type', emailData.reportType);
      
      if (emailData.senderName) {
        formData.append('name', emailData.senderName);
      }
      
      const subject = `Vehicle Report for ${emailData.registration}`;
      formData.append('subject', subject);
      
      const response = await fetch('/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(formData as any).toString()
      });

      if (response.ok) {
        return {
          success: true,
          message: 'Report sent successfully! Check your inbox for the vehicle report.'
        };
      } else {
        throw new Error('Failed to send report email');
      }
    } catch (error) {
      console.error('Email sending error:', error);
      return {
        success: false,
        message: 'Failed to send report. Please try again or download the PDF instead.'
      };
    }
  }

  /**
   * Create email content for dispute letter
   */
  static createEmailContent(ticketNumber: string, personalDetails: any): {
    subject: string;
    message: string;
  } {
    const subject = `Your Dispute Letter - Ticket ${ticketNumber}`;
    
    const message = `Dear ${personalDetails.name},

Your professional dispute letter for ticket ${ticketNumber} is attached to this email.

IMPORTANT NEXT STEPS:
1. Review the letter carefully
2. Print and sign the letter
3. Gather any supporting evidence mentioned in the letter
4. Send the letter to the relevant council by RECORDED DELIVERY
5. Keep copies of everything for your records

SUBMISSION DEADLINE:
Most councils require appeals to be submitted within 28 days of the ticket issue date. Please check your specific deadline and submit as soon as possible.

WHAT TO INCLUDE:
- The signed appeal letter (attached)
- Copies of any supporting evidence (photos, receipts, etc.)
- Copy of the original penalty notice

SENDING YOUR APPEAL:
- Use recorded delivery for proof of posting
- Keep the tracking receipt
- Send to the address shown on your penalty notice

If you need any assistance or have questions about your appeal, please don't hesitate to contact our support team.

Best regards,
AutoAudit Support Team

---
This letter was generated by AutoAudit's professional dispute letter service.
For support, visit: https://autoaudit.net/contact`;

    return { subject, message };
  }

  /**
   * Create email content for vehicle report
   */
  static createVehicleReportEmailContent(registration: string, reportType: 'basic' | 'comprehensive'): {
    subject: string;
    message: string;
  } {
    const subject = `Your ${reportType === 'comprehensive' ? 'Comprehensive' : 'Basic'} Vehicle Report for ${registration}`;
    
    const message = `Dear User,

Your ${reportType === 'comprehensive' ? 'comprehensive' : 'basic'} vehicle report for ${registration} is attached to this email.

This report includes:
${reportType === 'comprehensive' ? 
`- Complete vehicle details
- MOT and tax status
- Vehicle history check
- Risk assessment
- Valuation information
- Performance data` : 
`- Basic vehicle details
- MOT and tax status`}

IMPORTANT INFORMATION:
- This report is for informational purposes only
- The data is sourced from official DVLA records
- The report was generated on ${new Date().toLocaleDateString()}

If you need any assistance or have questions about your report, please don't hesitate to contact our support team.

Best regards,
AutoAudit Support Team

---
This report was generated by AutoAudit's vehicle history service.
For support, visit: https://autoaudit.net/contact`;

    return { subject, message };
  }

  /**
   * Validate email address
   */
  static isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Create a mailto link as fallback
   */
  static createMailtoLink(emailData: EmailData): string {
    const { subject, message } = this.createEmailContent(
      emailData.ticketNumber,
      emailData.personalDetails
    );
    
    const encodedSubject = encodeURIComponent(subject);
    const encodedBody = encodeURIComponent(`${message}\n\n--- LETTER CONTENT ---\n\n${emailData.letterContent}`);
    
    return `mailto:${emailData.to}?subject=${encodedSubject}&body=${encodedBody}`;
  }

  /**
   * Create a mailto link for vehicle report as fallback
   */
  static createVehicleReportMailtoLink(emailData: VehicleReportEmailData): string {
    const { subject, message } = this.createVehicleReportEmailContent(
      emailData.registration,
      emailData.reportType
    );
    
    const encodedSubject = encodeURIComponent(subject);
    const encodedBody = encodeURIComponent(`${message}\n\n--- REPORT CONTENT ---\n\n${emailData.reportContent}`);
    
    return `mailto:${emailData.to}?subject=${encodedSubject}&body=${encodedBody}`;
  }
}

export default EmailService;